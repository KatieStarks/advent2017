(ns advent2017.day1)

  ;The captcha requires you to review a sequence of digits (your puzzle input) and find the sum of all digits that match the next digit in the list. The list is circular, so the digit after the last digit is the first digit in the list.
  ;
  ;For example:
  ;
  ;1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit and the third digit (2) matches the fourth digit.
  ;1111 produces 4 because each digit (all 1) matches the next.
  ;1234 produces 0 because no digit matches the next.
  ;91212129 produces 9 because the only digit that matches the next one is the last digit, 9.
  ;What is the solution to your captcha?

(def input 123123)
(def input2 12131415)
(def input3 1234)

(def input-real

;; split digits
(defn split-digits [number]
  (map #(Character/digit % 10) (str number)))

;; add first digit to the array
(defn conj-first-digit [input]
  (conj (vec input) (first input)))

;; compare first two (pair), then recur, adding the value to it if it's a match
(defn com-pair [input]
  (let [f (first input)
        s (second input)]
    (if (nil? s)
      0
      (if (== f s)
        (+ f (com-pair (vec (rest input))))
        (com-pair (vec (rest input)))))))

(defn -main1 [input]
  (->> input
       split-digits
       conj-first-digit
       com-pair))

;Now, instead of considering the next digit, it wants you to consider the digit halfway around the circular list. That is, if your list contains 10 items, only include a digit in your sum if the digit 10/2 = 5 steps forward matches it. Fortunately, your list has an even number of elements.
;
;For example:
;
;1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead.
;1221 produces 0, because every comparison is between a 1 and a 2.
;123425 produces 4, because both 2s match each other, but no other digit has a match.
;123123 produces 12.
;12131415 produces 4.

;; rotates input by half for easy comparison
(defn rotate [input]
  (let [half (/ (count input) 2)]
    (flatten (conj (take half input) (drop half input)))))

;; compare each list together
(defn compare-lists [x y]
  (if (== x y)
    x))

(defn -main2 [input]
  (let [split-input (split-digits input)
        rotated (rotate split-input)]
    (reduce + (filter #(not (nil? %)) (map compare-lists split-input rotated)))))